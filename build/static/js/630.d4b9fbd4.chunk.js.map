{"version":3,"file":"static/js/630.d4b9fbd4.chunk.js","mappings":"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","sources":["Component/AdminDashboard/AdminPlans.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport axios from 'axios'; // Keep axios for creating the instance\r\nimport './Style/AdminPlans.scss';\r\n\r\nconst baseUrl = process.env.REACT_APP_API_BASE_URL;\r\n// --- Environment Variables for API Base URLs ---\r\nconst plansApiBaseUrl = process.env.REACT_APP_PLANS_API_BASE_URL;\r\nconst userServiceApiBaseUrl = process.env.REACT_APP_USER_SERVICE_API_BASE_URL;\r\nconst externalDataApiBaseUrl = process.env.REACT_APP_EXTERNAL_DATA_API_BASE_URL;\r\nconst externalDataApiKey = process.env.REACT_APP_EXTERNAL_DATA_API_KEY; // For the external API\r\n\r\n// --- Axios Instance with Authorization Header ---\r\n// *** CHANGE: Added 'export' so this can be imported and mocked in tests ***\r\nexport const apiClient = axios.create({\r\n    baseURL: `${baseUrl}/api`, // Set the base URL for all requests from this client\r\n});\r\n\r\n// Add a request interceptor to include the token\r\napiClient.interceptors.request.use(\r\n    (config) => {\r\n        const token = localStorage.getItem('authToken');\r\n        if (token) {\r\n            config.headers['Authorization'] = `Bearer ${token}`;\r\n        }\r\n        // console.log('Request Headers for debugging:', config.headers);\r\n        return config;\r\n    },\r\n    (error) => {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// --- AdminPlans Component ---\r\nconst AdminPlans = () => {\r\n    const [plans, setPlans] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [showFormModal, setShowFormModal] = useState(false);\r\n    const [currentPlan, setCurrentPlan] = useState(null); // For editing\r\n    const [formData, setFormData] = useState({\r\n        name: '',\r\n        description: '',\r\n        price: '',\r\n    });\r\n\r\n    // Fetch all plans\r\n    const fetchPlans = useCallback(async () => {\r\n        setIsLoading(true);\r\n        setError(null);\r\n        const token = localStorage.getItem('authToken'); // Check if token exists for better UX before API call\r\n        if (!token) {\r\n            setError(\"Authorization token not found. Please ensure you are logged in.\");\r\n            setIsLoading(false);\r\n            setPlans([]); // Clear plans if no token\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await apiClient.get('/plans'); // Uses apiClient, which includes the token\r\n            setPlans(response.data || []);\r\n        } catch (e) {\r\n            let errorMessage = \"Failed to fetch plans.\";\r\n            if (e.response) {\r\n                errorMessage = e.response.data?.message || `Error ${e.response.status}: ${e.response.statusText}`;\r\n                if (e.response.status === 401 || e.response.status === 403) {\r\n                    errorMessage += \" (Authorization failed. Your session might have expired or token is invalid. Please try logging in again.)\";\r\n                }\r\n            } else if (e.request) {\r\n                errorMessage = \"No response from server. Check network connection.\";\r\n            } else {\r\n                errorMessage = e.message;\r\n            }\r\n            setError(errorMessage);\r\n            console.error(\"Failed to fetch plans:\", e);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        fetchPlans();\r\n    }, [fetchPlans]);\r\n\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setFormData(prev => ({ ...prev, [name]: name === 'price' ? (value === '' ? '' : parseFloat(value) < 0 ? '0' : value) : value }));\r\n    };\r\n\r\n    const resetFormAndCloseModal = () => {\r\n        setFormData({ name: '', description: '', price: '' });\r\n        setCurrentPlan(null);\r\n        setShowFormModal(false);\r\n        setError(null);\r\n    };\r\n\r\n    const handleAddPlanClick = () => {\r\n        const token = localStorage.getItem('authToken');\r\n        if (!token) {\r\n            setError(\"Cannot add plan: Authorization token not found. Please log in.\");\r\n            // Optionally, you could redirect to login here or show a more prominent message.\r\n            return;\r\n        }\r\n        setCurrentPlan(null);\r\n        setFormData({ name: '', description: '', price: '' });\r\n        setShowFormModal(true);\r\n    };\r\n\r\n    const handleEditPlanClick = (plan) => {\r\n        const token = localStorage.getItem('authToken');\r\n        if (!token) {\r\n            setError(\"Cannot edit plan: Authorization token not found. Please log in.\");\r\n            return;\r\n        }\r\n        setCurrentPlan(plan);\r\n        setFormData({\r\n            name: plan.name,\r\n            description: plan.description || '',\r\n            price: plan.price.toString(),\r\n        });\r\n        setShowFormModal(true);\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setError(null);\r\n\r\n        const token = localStorage.getItem('authToken');\r\n        if (!token) {\r\n            setError(\"Cannot save plan: Authorization token not found. Please log in.\");\r\n            setIsLoading(false);\r\n            return;\r\n        }\r\n\r\n        const { name, description, price } = formData;\r\n        if (!name.trim() || price === '' || parseFloat(price) < 0) {\r\n            setError(\"Plan Name and a valid Price (>= 0) are required.\");\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n\r\n        const planData = {\r\n            name: name.trim(),\r\n            description: description.trim(),\r\n            price: parseFloat(price),\r\n        };\r\n\r\n        try {\r\n            if (currentPlan && currentPlan.id) {\r\n                await apiClient.put(`/plans/${currentPlan.id}`, planData);\r\n            } else {\r\n                await apiClient.post('/plans', planData);\r\n            }\r\n            resetFormAndCloseModal();\r\n            fetchPlans(); // Refresh the list\r\n        } catch (e) {\r\n            let errorMessage = \"Failed to save plan.\";\r\n             if (e.response) {\r\n                errorMessage = e.response.data?.message || `Error ${e.response.status}: ${e.response.statusText}`;\r\n                if (e.response.status === 401 || e.response.status === 403) {\r\n                    errorMessage += \" (Authorization failed. Check token or permissions. You might need to log in again.)\";\r\n                }\r\n            } else if (e.request) {\r\n                errorMessage = \"No response from server while saving.\";\r\n            } else {\r\n                errorMessage = e.message;\r\n            }\r\n            setError(errorMessage); // Show error within the modal\r\n            console.error(\"Failed to save plan:\", e);\r\n            setIsLoading(false); // Stop loading as the operation failed and modal likely stays open\r\n        }\r\n        // On success, isLoading will be handled by fetchPlans or reset by modal closing.\r\n    };\r\n\r\n    const handleDeletePlan = async (planId) => {\r\n        const token = localStorage.getItem('authToken');\r\n        if (!token) {\r\n            setError(\"Cannot delete plan: Authorization token not found. Please log in.\");\r\n            return;\r\n        }\r\n\r\n        if (!window.confirm(\"Are you sure you want to delete this plan? This action cannot be undone.\")) {\r\n            return;\r\n        }\r\n        setIsLoading(true);\r\n        setError(null);\r\n        try {\r\n            await apiClient.delete(`/plans/${planId}`);\r\n            fetchPlans(); // Refresh the list\r\n        } catch (e) {\r\n            let errorMessage = \"Failed to delete plan.\";\r\n            if (e.response) {\r\n                errorMessage = e.response.data?.message || `Error ${e.response.status}: ${e.response.statusText}`;\r\n                if (e.response.status === 401 || e.response.status === 403) {\r\n                    errorMessage += \" (Authorization failed. Check token or permissions. You might need to log in again.)\";\r\n                }\r\n            } else if (e.request) {\r\n                errorMessage = \"No response from server while deleting.\";\r\n            } else {\r\n                errorMessage = e.message;\r\n            }\r\n            setError(errorMessage);\r\n            console.error(\"Failed to delete plan:\", e);\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"admin-plans-page\">\r\n            <div className=\"page-header\">\r\n                <h1>Manage Investment Plans</h1>\r\n                <button onClick={handleAddPlanClick} className=\"btn btn-primary btn-add-plan\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" width=\"20\" height=\"20\">\r\n                        <path d=\"M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z\" />\r\n                    </svg>\r\n                    Add New Plan\r\n                </button>\r\n            </div>\r\n\r\n            {/* Global Error Message for fetch/delete or token issues */}\r\n            {error && !showFormModal && <div className=\"global-error-message\">{error}</div>}\r\n            \r\n            {isLoading && plans.length === 0 && !error && <div className=\"loading-indicator\">Loading plans...</div>}\r\n\r\n            {showFormModal && (\r\n                <div className=\"modal-overlay\" data-testid=\"modal-overlay\" onClick={resetFormAndCloseModal}>\r\n                    <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\r\n                        <button className=\"modal-close-button\" onClick={resetFormAndCloseModal}>\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" width=\"24\" height=\"24\">\r\n                                <path d=\"M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z\" />\r\n                            </svg>\r\n                        </button>\r\n                        <h2>{currentPlan ? 'Edit Plan' : 'Create New Plan'}</h2>\r\n                        {/* Form-specific error (can also show token errors here if an action is tried within the modal) */}\r\n                        {error && showFormModal && <p className=\"form-error-message\">{error}</p>}\r\n                        <form onSubmit={handleSubmit}>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"name\">Plan Name</label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    id=\"name\"\r\n                                    name=\"name\"\r\n                                    value={formData.name}\r\n                                    onChange={handleInputChange}\r\n                                    placeholder=\"e.g., Growth Portfolio\"\r\n                                    required\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"description\">Description (Optional)</label>\r\n                                <textarea\r\n                                    id=\"description\"\r\n                                    name=\"description\"\r\n                                    value={formData.description}\r\n                                    onChange={handleInputChange}\r\n                                    placeholder=\"Briefly describe this plan...\"\r\n                                    rows=\"4\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"price\">Price ($)</label>\r\n                                <input\r\n                                    type=\"number\"\r\n                                    id=\"price\"\r\n                                    name=\"price\"\r\n                                    value={formData.price}\r\n                                    onChange={handleInputChange}\r\n                                    placeholder=\"e.g., 99.99\"\r\n                                    required\r\n                                    step=\"0.01\"\r\n                                    min=\"0\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-actions\">\r\n                                <button type=\"button\" className=\"btn btn-secondary\" onClick={resetFormAndCloseModal} disabled={isLoading}>\r\n                                    Cancel\r\n                                </button>\r\n                                <button type=\"submit\" className=\"btn btn-primary\" disabled={isLoading}>\r\n                                    {isLoading ? 'Saving...' : (currentPlan ? 'Update Plan' : 'Create Plan')}\r\n                                </button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {!showFormModal && (\r\n                <div className=\"plans-grid\">\r\n                    {/* Only show \"No plans found\" if not loading and no error related to token being missing for fetchPlans */}\r\n                    {plans.length === 0 && !isLoading && (!error || (error && !error.toLowerCase().includes(\"token not found\"))) && (\r\n                         <div className=\"empty-state\">\r\n                            <p>No investment plans found.</p>\r\n                            <p>Click \"Add New Plan\" to get started!</p>\r\n                        </div>\r\n                    )}\r\n                    {/* If there is an error and it IS about token not found, the global error message will show. */}\r\n                    \r\n                    {plans.map(plan => (\r\n                        <div key={plan.id} className=\"plan-card\">\r\n                            <div className=\"plan-card-content\">\r\n                                <div className=\"plan-card-header\">\r\n                                    <h3>{plan.name}</h3>\r\n                                    <span className=\"plan-price\">${parseFloat(plan.price).toFixed(2)}</span>\r\n                                 </div>\r\n                                <p className=\"plan-description\">\r\n                                    {plan.description || <span className=\"no-description\">No description provided.</span>}\r\n                                </p>\r\n                                <div className=\"plan-meta\">\r\n                                    <small>ID: {plan.id}</small>\r\n                                    <small>Created: {new Date(plan.createdAt).toLocaleDateString()}</small>\r\n                                    <small>Last Updated: {new Date(plan.updatedAt).toLocaleDateString()}</small>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"plan-card-actions\">\r\n                                <button onClick={() => handleEditPlanClick(plan)} className=\"btn btn-icon btn-edit\" title=\"Edit Plan\">\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" width=\"18\" height=\"18\">\r\n                                      <path d=\"M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z\" />\r\n                                    </svg>\r\n                                </button>\r\n                                <button \r\n                                    onClick={() => handleDeletePlan(plan.id)} \r\n                                    className=\"btn btn-icon btn-delete\" \r\n                                    disabled={isLoading}\r\n                                    title=\"Delete Plan\"\r\n                                >\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" width=\"18\" height=\"18\">\r\n                                      <path fillRule=\"evenodd\" d=\"M8.75 1A2.75 2.75 0 006 3.75v.443c-.795.077-1.58.19-2.34.343a.75.75 0 00-.5.832l.995 6.967c.23.159.48.298.745.414V17a1 1 0 001 1h4a1 1 0 001-1v-4.745a5.38 5.38 0 00.745-.414l.995-6.967a.75.75 0 00-.5-.832c-.76-.153-1.545-.266-2.34-.343V3.75A2.75 2.75 0 008.75 1zM7.5 3.75c0-.69.56-1.25 1.25-1.25s1.25.56 1.25 1.25v.443c-.455.042-.914.101-1.37.174A4.34 4.34 0 007.5 4.193V3.75zM8.75 6a.75.75 0 00-.75.75v4.5a.75.75 0 001.5 0v-4.5A.75.75 0 008.75 6z\" clipRule=\"evenodd\" />\r\n                                    </svg>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AdminPlans;"],"names":["apiClient","axios","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject","AdminPlans","plans","setPlans","useState","isLoading","setIsLoading","setError","showFormModal","setShowFormModal","currentPlan","setCurrentPlan","formData","setFormData","name","description","price","fetchPlans","useCallback","async","response","get","data","e","errorMessage","_e$response$data","message","status","statusText","console","useEffect","handleInputChange","value","target","prev","parseFloat","resetFormAndCloseModal","_jsxs","className","children","_jsx","onClick","handleAddPlanClick","xmlns","viewBox","fill","width","height","d","length","stopPropagation","onSubmit","preventDefault","trim","planData","id","put","post","_e$response$data2","htmlFor","type","onChange","placeholder","required","rows","step","min","disabled","toLowerCase","includes","map","plan","toFixed","Date","createdAt","toLocaleDateString","updatedAt","toString","handleEditPlanClick","title","window","confirm","delete","planId","_e$response$data3","handleDeletePlan","fillRule","clipRule"],"sourceRoot":""}