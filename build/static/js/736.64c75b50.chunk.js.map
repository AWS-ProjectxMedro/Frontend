{"version":3,"file":"static/js/736.64c75b50.chunk.js","mappings":"8MAQA,MAAMA,EACMC,6BADND,EAEO,CACTE,QAAS,mBACTC,QAAUC,GAAO,oBAAoBA,YACrCC,OAASD,GAAO,oBAAoBA,YAIlCE,EAAYC,EAAAA,EAAMC,OAAO,CAC7BC,QAAST,IAGXM,EAAUI,aAAaC,QAAQC,KAC5BC,IACC,MAAMC,EAAQC,aAAaC,QAAQ,aAInC,OAHIF,IACFD,EAAOI,QAAuB,cAAI,UAAUH,KAEvCD,CAAM,IAEdK,GAAUC,QAAQC,OAAOF,KAO5B,MAAMG,EAAiB,SAACC,GAA6B,IAAtBC,EAAQC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,MACxC,MAAqB,kBAAVF,EAA2B,MAE/BA,EAAMK,eAAe,QAAS,CAAEC,MAAO,WAAYL,SAAUA,GACtE,EAUMM,EAAiBA,CAACC,EAAMC,KAG5B,GAFAC,QAAQC,IAAI,oDAA0CF,KAAiBD,IAElEA,GAAiB,OAATA,QAA0BJ,IAATI,EAE5B,OADAE,QAAQE,KAAK,4CAAkCH,MAE7CI,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWC,SAAA,EACxBC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,YAAYR,MAAO,CAACW,MAAO,WAAWF,SAAC,kBACvDC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,aAAaR,MAAO,CAACW,MAAO,QAAQF,SAAC,yBAM3DL,QAAQC,IAAI,gDAAsCF,KAAiBS,OAAOC,KAAKX,IAC/EE,QAAQC,IAAI,4BAAmBH,GAG/B,MAAMY,EAAWF,OAAOC,KAAKX,GAC7BE,QAAQC,IAAI,oCACZS,EAASC,SAAQC,IACfZ,QAAQC,IAAI,KAAKW,OAASd,EAAKc,MAAQ,IAIzC,IAAIC,EAAW,eACXC,EAAY,oBAsChB,OAnCIhB,EAAKiB,MAAQjB,EAAKiB,KAAKC,OACzBH,EAAWf,EAAKiB,KAAKC,OACZlB,EAAKmB,UAAYnB,EAAKmB,SAASD,OACxCH,EAAWf,EAAKmB,SAASD,OAChBlB,EAAKoB,UAAYpB,EAAKoB,SAASF,OACxCH,EAAWf,EAAKoB,SAASF,OAChBlB,EAAKqB,aAAerB,EAAKqB,YAAYH,OAC9CH,EAAWf,EAAKqB,YAAYH,OACnBlB,EAAKsB,WAAatB,EAAKuB,SAChCR,EAAW,GAAGf,EAAKsB,aAAatB,EAAKuB,WAAWL,OACvClB,EAAKsB,UACdP,EAAWf,EAAKsB,UAAUJ,OACjBlB,EAAKwB,WAAaxB,EAAKwB,UAAUN,OAC1CH,EAAWf,EAAKwB,UAAUN,OACjBlB,EAAKyB,YAAczB,EAAK0B,UACjCX,EAAW,GAAGf,EAAKyB,cAAczB,EAAK0B,YAAYR,OACzClB,EAAKyB,aACdV,EAAWf,EAAKyB,WAAWP,QAIzBlB,EAAK2B,OAAS3B,EAAK2B,MAAMT,OAC3BF,EAAYhB,EAAK2B,MAAMT,OACdlB,EAAKgB,WAAahB,EAAKgB,UAAUE,OAC1CF,EAAYhB,EAAKgB,UAAUE,OAClBlB,EAAK4B,cAAgB5B,EAAK4B,aAAaV,OAChDF,EAAYhB,EAAK4B,aAAaV,OACrBlB,EAAK6B,MAAQ7B,EAAK6B,KAAKX,OAChCF,EAAYhB,EAAK6B,KAAKX,OACblB,EAAK8B,eAAiB9B,EAAK8B,cAAcZ,SAClDF,EAAYhB,EAAK8B,cAAcZ,QAGjChB,QAAQC,IAAI,yCAAoCF,KAAiB,CAAEc,WAAUC,eAG3EX,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWC,SAAA,EACxBC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,YAAWC,SAAEQ,KAC7BP,EAAAA,EAAAA,KAAA,QAAMF,UAAU,aAAYC,SAAES,MAC1B,EAkPV,EA9OmBe,KACjB,MAAOC,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,KACxCC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,IACpC9C,EAAOiD,IAAYH,EAAAA,EAAAA,UAAS,OAC5BI,EAAYC,IAAiBL,EAAAA,EAAAA,UAAS,OAE7CM,EAAAA,EAAAA,YAAU,KACiBC,WACvBL,GAAa,GACbC,EAAS,MAET,IACEnC,QAAQC,IAAI,0CAAiCjC,EAAqBE,SAClE,MAAMsE,QAAiBlE,EAAUmE,IAAIzE,EAAqBE,SAG1D,GAFA8B,QAAQC,IAAI,uBAAmBuC,EAASE,OAEnCC,MAAMC,QAAQJ,EAASE,MAC1B,MAAM,IAAIG,MAAM,sCAAsCL,EAASE,MAG7DF,EAASE,KAAKjD,OAAS,GACzBO,QAAQC,IAAI,qCAA4BuC,EAASE,KAAK,IAGxDX,EAAeS,EAASE,KAE1B,CAAE,MAAOI,GACP9C,QAAQd,MAAM,qCAAiC4D,GAC/CX,EAAS,wCAAwCW,EAAIC,UACvD,CAAC,QACCb,GAAa,EACf,GAGFc,EAAkB,GACjB,IAEH,MAAMC,EAAeA,CAAC7E,EAAI8E,KACxB,MACMC,EAAiB,4BADW,YAAfD,EAA2B,UAAY,gCAC2B9E,KA2C/EgF,EAAwBC,IAAA,IAAC,WAAEC,GAAYD,EAAA,OAC3ClD,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAGV,MAAO,CAAE2D,OAAQ,cAAelD,SAAE8C,KACrChD,EAAAA,EAAAA,MAAA,OAAKP,MAAO,CAAE4D,QAAS,OAAQC,eAAgB,WAAYC,IAAK,QAASrD,SAAA,EACvEC,EAAAA,EAAAA,KAAA,UACEF,UAAU,uBACVuD,QAASL,EAAWjD,SACrB,YAGDC,EAAAA,EAAAA,KAAA,UACEF,UAAU,wBACVuD,QAASA,KArDKpB,WACpBF,EAAcjE,GACd,MAAMwF,EAAsB,IAAI9B,GAE1B+B,EAA2B,YAAfX,EAA2B,WAAa,WAC1DnB,GAAe+B,GACbA,EAAKC,KAAIC,GAAKA,EAAE5F,KAAOA,EAAK,IAAK4F,EAAGC,OAAQJ,GAAcG,MAG5D,IACE,MAAME,EAA0B,YAAfhB,EACblF,EAAqBG,QAAQC,GAC7BJ,EAAqBK,OAAOD,GAEhC4B,QAAQC,IAAI,gBAAMiD,EAAWiB,+BAA+B/F,QAAU8F,GACtE,MAAME,EAAc,CAClBC,UAAW,GAAGR,EAAUS,OAAO,GAAGH,cAAgBN,EAAUU,MAAM,mBAAkB,IAAIC,MAAO7E,oBAG3F6C,QAAiBlE,EAAUmG,KAAKP,EAAUE,GAChDpE,QAAQC,IAAI,uBAAkBiD,kBAA2B9E,KAAOoE,EAASE,MAErEF,EAASE,MAAQF,EAASE,KAAKgC,YACjC3C,GAAe+B,GACbA,EAAKC,KAAIC,GAAKA,EAAE5F,KAAOA,EAAK,IAAK4F,KAAMxB,EAASE,KAAKgC,YAAeV,MAIxEW,EAAAA,GAAMC,QAAQ,8BAAyBxG,cAAeyF,kBAExD,CAAE,MAAOf,GAAM,IAAD+B,EAAAC,EACZ9E,QAAQd,MAAM,gBAAWgE,mBAA6BJ,GACtDf,EAAe6B,GAEf,MAAMmB,GAA2B,QAAZF,EAAA/B,EAAIN,gBAAQ,IAAAqC,GAAM,QAANC,EAAZD,EAAcnC,YAAI,IAAAoC,OAAN,EAAZA,EAAoB/B,UAAWD,EAAIC,SAAW,yBACnE4B,EAAAA,GAAMzF,OAAMiB,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EAAKF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,aAAW6C,EAAW,gBAAc9E,EAAG,QAAKkC,EAAAA,EAAAA,KAAA,UAAMH,EAAAA,EAAAA,MAAA,SAAAE,SAAA,CAAO,UAAQ0E,QACvF,CAAC,QACC1C,EAAc,KAChB,GAgBQ2C,GACA1B,GAAY,EACZjD,SACH,iBAIC,GAGRsE,EAAAA,EAAAA,KAAMrE,EAAAA,EAAAA,KAAC8C,EAAqB,IAAK,CAC/B6B,SAAU,aACVC,WAAW,EACXC,cAAc,EACdC,WAAW,EACXC,QAAS,kBAAkBjH,KAC3B,EAwGJ,OACE+B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC9BC,EAAAA,EAAAA,KAACgF,EAAAA,GAAc,CACbL,SAAS,YACTC,UAAW,IACXK,iBAAiB,EACjBC,aAAa,EACbL,cAAY,EACZM,KAAK,EACLC,kBAAgB,EAChBN,WAAS,EACTO,cAAY,EACZC,MAAM,aAERzF,EAAAA,EAAAA,MAAA,UAAQC,UAAU,cAAaC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,wBACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,uDApHH4B,GACK3B,EAAAA,EAAAA,KAAA,OAAKF,UAAU,kBAAiBC,SAAC,mCAGtCnB,GAEAiB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,KAAAD,SAAInB,KACJoB,EAAAA,EAAAA,KAAA,UAAQqD,QAASA,IAAMkC,OAAOC,SAASC,SAAU3F,UAAU,gBAAeC,SAAC,aAOtD,IAAvByB,EAAYrC,QACPa,EAAAA,EAAAA,KAAA,OAAKF,UAAU,kBAAiBC,SAAC,mCAIxCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,kBAAiBC,UAC9BF,EAAAA,EAAAA,MAAA,SAAOC,UAAU,mBAAkBC,SAAA,EACjCC,EAAAA,EAAAA,KAAA,SAAAD,UACEF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,UACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,YACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,UACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,YACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kBAGRC,EAAAA,EAAAA,KAAA,SAAAD,SACGyB,EAAYiC,KAAI,CAACC,EAAGgC,KACnB,MAAMC,EAAa7D,IAAe4B,EAAE5F,GAEpC,IAAI8H,EAAW,KACf,GAAIlC,EAAEmC,KACJD,EAAWlC,EAAEmC,KAAKC,YAAcpC,EAAEmC,UAC7B,GAAInC,EAAElE,KACXoG,EAAWlC,EAAElE,KAAKsG,YAAcpC,EAAElE,SAC7B,CACL,MAAMuG,EAAkB7F,OAAOC,KAAKuD,GAAGsC,MAAK1F,GAAOA,EAAI2F,cAAcC,SAAS,UAC1EH,IAAiBH,EAAWlC,EAAEqC,GACpC,CAEA,OACElG,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAI,aAAW,OAAMD,SAClBR,EAAeqG,EAAUlC,EAAE5F,OAE9BkC,EAAAA,EAAAA,KAAA,MAAI,aAAW,SAASF,UAAU,cAAaC,SAC5ChB,EAAe2E,EAAEyC,WAEpBnG,EAAAA,EAAAA,KAAA,MAAI,aAAW,OAAMD,SAClB2D,EAAE0C,WAxPHC,EAwP0B3C,EAAE0C,UAvPvC,IAAIlC,KAAKmC,GAAYC,mBAAmB,QAAS,CACtDC,KAAM,UAAWC,MAAO,QAASC,IAAK,aAsPmB,aAE3CzG,EAAAA,EAAAA,KAAA,MAAI,aAAW,SAAQD,UACrBC,EAAAA,EAAAA,KAAA,QAAMF,UAAW,wBAAwB4D,EAAEC,QAAU,WAAWsC,gBAAgBlG,SAC7E2D,EAAEC,QAAU,eAGjB3D,EAAAA,EAAAA,KAAA,MAAI,aAAW,UAASD,UACtBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EACd,YAAb2D,EAAEC,QAAqC,YAAbD,EAAEC,UAC5B9D,EAAAA,EAAAA,MAAA6G,EAAAA,SAAA,CAAA3G,SAAA,EACEC,EAAAA,EAAAA,KAAA,UACEqD,QAASA,IAAMV,EAAae,EAAE5F,GAAI,WAClCgC,UAAU,kBACV6G,SAAUhB,EACViB,MAAO,+BAA+BlD,EAAE5F,KAAKiC,SAE5C4F,EAAa,uBAAoB,oBAEpC3F,EAAAA,EAAAA,KAAA,UACEqD,QAASA,IAAMV,EAAae,EAAE5F,GAAI,UAClCgC,UAAU,iBACV6G,SAAUhB,EACViB,MAAO,8BAA8BlD,EAAE5F,KAAKiC,SAE3C4F,EAAa,uBAAoB,sBAIzB,aAAbjC,EAAEC,QAAsC,aAAbD,EAAEC,UAC7B3D,EAAAA,EAAAA,KAAA,QAAMF,UAAU,4BAA2BC,SAAC,qBAE/B,aAAb2D,EAAEC,QAAsC,aAAbD,EAAEC,UAC7B3D,EAAAA,EAAAA,KAAA,QAAMF,UAAU,4BAA2BC,SAAC,2BAzC3C2D,EAAE5F,IAAM,cAAc4H,KAhP3BW,KA6RC,aA4BX,C","sources":["Component/AdminDashboard/Withdrawal.jsx"],"sourcesContent":["// src/Component/AdminDashboard/Withdrawal.jsx - PRODUCTION READY (FIXED & ENHANCED WITH TOASTS & RUPEE CURRENCY)\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './Style/Withdrawal.scss';\r\n\r\n// --- START: API Configuration ---\r\nconst API_CONFIG = {\r\n  BASE_URL: process.env.REACT_APP_API_BASE_URL,\r\n  ENDPOINTS: {\r\n    GET_ALL: '/api/withdrawals',\r\n    APPROVE: (id) => `/api/withdrawals/${id}/approve`,\r\n    REJECT: (id) => `/api/withdrawals/${id}/reject`,\r\n  },\r\n};\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: API_CONFIG.BASE_URL,\r\n});\r\n\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('authToken');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n// --- END: API Configuration ---\r\n\r\n// Helper functions\r\n\r\n// --- MODIFIED LINE: Changed default currency from USD to INR ---\r\nconst formatCurrency = (value, currency = 'INR') => {\r\n  if (typeof value !== 'number') return 'N/A';\r\n  // Use 'en-IN' locale for Indian Rupee formatting (e.g., ‚Çπ1,00,000)\r\n  return value.toLocaleString('en-IN', { style: 'currency', currency: currency });\r\n};\r\n// --- END OF MODIFICATION ---\r\n\r\nconst formatDate = (dateString) => {\r\n  return new Date(dateString).toLocaleDateString('en-US', {\r\n    year: 'numeric', month: 'short', day: 'numeric'\r\n  });\r\n};\r\n\r\n// Fixed user info renderer - handles Sequelize included data\r\nconst renderUserInfo = (user, withdrawalId) => {\r\n  console.log(`üîç Processing user data for withdrawal ${withdrawalId}:`, user);\r\n  \r\n  if (!user || user === null || user === undefined) {\r\n    console.warn(`‚ö†Ô∏è No user data for withdrawal ${withdrawalId}`);\r\n    return (\r\n      <div className=\"user-info\">\r\n        <span className=\"user-name\" style={{color: '#ff6b6b'}}>Unknown User</span>\r\n        <span className=\"user-email\" style={{color: '#999'}}>No email provided</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Debug: Log all available user properties\r\n  console.log(`üìã User object keys for withdrawal ${withdrawalId}:`, Object.keys(user));\r\n  console.log(`üìù User values:`, user);\r\n  \r\n  // Show actual field names and values for debugging\r\n  const userKeys = Object.keys(user);\r\n  console.log('üîç ACTUAL USER FIELDS:');\r\n  userKeys.forEach(key => {\r\n    console.log(`  ${key}: \"${user[key]}\"`);\r\n  });\r\n\r\n  // Handle different user object structures flexibly\r\n  let userName = 'Unknown User';\r\n  let userEmail = 'No email provided';\r\n\r\n  // Try multiple possible name fields (including common database field names)\r\n  if (user.name && user.name.trim()) {\r\n    userName = user.name.trim();\r\n  } else if (user.fullName && user.fullName.trim()) {\r\n    userName = user.fullName.trim();\r\n  } else if (user.username && user.username.trim()) {\r\n    userName = user.username.trim();\r\n  } else if (user.displayName && user.displayName.trim()) {\r\n    userName = user.displayName.trim();\r\n  } else if (user.firstName && user.lastName) {\r\n    userName = `${user.firstName} ${user.lastName}`.trim();\r\n  } else if (user.firstName) {\r\n    userName = user.firstName.trim();\r\n  } else if (user.full_name && user.full_name.trim()) {\r\n    userName = user.full_name.trim();\r\n  } else if (user.first_name && user.last_name) {\r\n    userName = `${user.first_name} ${user.last_name}`.trim();\r\n  } else if (user.first_name) {\r\n    userName = user.first_name.trim();\r\n  }\r\n\r\n  // Try multiple possible email fields\r\n  if (user.email && user.email.trim()) {\r\n    userEmail = user.email.trim();\r\n  } else if (user.userEmail && user.userEmail.trim()) {\r\n    userEmail = user.userEmail.trim();\r\n  } else if (user.emailAddress && user.emailAddress.trim()) {\r\n    userEmail = user.emailAddress.trim();\r\n  } else if (user.mail && user.mail.trim()) {\r\n    userEmail = user.mail.trim();\r\n  } else if (user.email_address && user.email_address.trim()) {\r\n    userEmail = user.email_address.trim();\r\n  }\r\n\r\n  console.log(`‚úÖ Final user info for withdrawal ${withdrawalId}:`, { userName, userEmail });\r\n\r\n  return (\r\n    <div className=\"user-info\">\r\n      <span className=\"user-name\">{userName}</span>\r\n      <span className=\"user-email\">{userEmail}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Withdrawal = () => {\r\n  const [withdrawals, setWithdrawals] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [updatingId, setUpdatingId] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchWithdrawals = async () => {\r\n      setIsLoading(true);\r\n      setError(null);\r\n      \r\n      try {\r\n        console.log('üåê Fetching withdrawals from:', API_CONFIG.ENDPOINTS.GET_ALL);\r\n        const response = await apiClient.get(API_CONFIG.ENDPOINTS.GET_ALL);\r\n        console.log('‚úÖ API Response:', response.data);\r\n        \r\n        if (!Array.isArray(response.data)) {\r\n          throw new Error(`Expected array but received ${typeof response.data}`);\r\n        }\r\n\r\n        if (response.data.length > 0) {\r\n          console.log('üìã First item structure:', response.data[0]);\r\n        }\r\n        \r\n        setWithdrawals(response.data);\r\n        \r\n      } catch (err) {\r\n        console.error('‚ùå Error fetching withdrawals:', err);\r\n        setError(`Failed to fetch withdrawal requests: ${err.message}`);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchWithdrawals();\r\n  }, []);\r\n\r\n  const handleAction = (id, actionType) => {\r\n    const actionText = actionType === 'approve' ? 'approve' : 'reject';\r\n    const confirmMessage = `Are you sure you want to ${actionText} withdrawal request #${id}?`;\r\n\r\n    const performAction = async () => {\r\n      setUpdatingId(id);\r\n      const originalWithdrawals = [...withdrawals];\r\n      \r\n      const newStatus = actionType === 'approve' ? 'approved' : 'rejected';\r\n      setWithdrawals(prev => \r\n        prev.map(w => w.id === id ? { ...w, status: newStatus } : w)\r\n      );\r\n\r\n      try {\r\n        const endpoint = actionType === 'approve' \r\n          ? API_CONFIG.ENDPOINTS.APPROVE(id)\r\n          : API_CONFIG.ENDPOINTS.REJECT(id);\r\n        \r\n        console.log(`üîÑ ${actionType.toUpperCase()}ING withdrawal ${id} at:`, endpoint);\r\n        const requestData = {\r\n          adminNote: `${newStatus.charAt(0).toUpperCase() + newStatus.slice(1)} by admin on ${new Date().toLocaleString()}`\r\n        };\r\n        \r\n        const response = await apiClient.post(endpoint, requestData);\r\n        console.log(`‚úÖ Successfully ${actionType}ed withdrawal ${id}:`, response.data);\r\n        \r\n        if (response.data && response.data.withdrawal) {\r\n          setWithdrawals(prev => \r\n            prev.map(w => w.id === id ? { ...w, ...response.data.withdrawal } : w)\r\n          );\r\n        }\r\n        \r\n        toast.success(`‚úÖ Withdrawal request #${id} has been ${newStatus} successfully!`);\r\n\r\n      } catch (err) {\r\n        console.error(`‚ùå Error ${actionType}ing withdrawal:`, err);\r\n        setWithdrawals(originalWithdrawals);\r\n        \r\n        const errorMessage = err.response?.data?.message || err.message || 'Unknown error occurred';\r\n        toast.error(<div><b>Failed to {actionType} withdrawal #{id}.</b><br /><small>Error: {errorMessage}</small></div>);\r\n      } finally {\r\n        setUpdatingId(null);\r\n      }\r\n    };\r\n\r\n    const ConfirmationComponent = ({ closeToast }) => (\r\n      <div>\r\n        <p style={{ margin: '0 0 15px 0' }}>{confirmMessage}</p>\r\n        <div style={{ display: 'flex', justifyContent: 'flex-end', gap: '10px' }}>\r\n          <button\r\n            className=\"btn btn-toast-cancel\"\r\n            onClick={closeToast}\r\n          >\r\n            Cancel\r\n          </button>\r\n          <button\r\n            className=\"btn btn-toast-confirm\"\r\n            onClick={() => {\r\n              performAction();\r\n              closeToast();\r\n            }}\r\n          >\r\n            Confirm\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    toast(<ConfirmationComponent />, {\r\n      position: \"top-center\",\r\n      autoClose: false,\r\n      closeOnClick: false,\r\n      draggable: false,\r\n      toastId: `confirm-action-${id}`\r\n    });\r\n  };\r\n\r\n  const renderContent = () => {\r\n    if (isLoading) {\r\n      return <div className=\"loading-message\">Loading withdrawal requests...</div>;\r\n    }\r\n    \r\n    if (error) {\r\n      return (\r\n        <div className=\"error-message\">\r\n          <p>{error}</p>\r\n          <button onClick={() => window.location.reload()} className=\"btn btn-retry\">\r\n            Retry\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n    \r\n    if (withdrawals.length === 0) {\r\n      return <div className=\"no-data-message\">No withdrawal requests found.</div>;\r\n    }\r\n\r\n    return (\r\n      <div className=\"table-container\">\r\n        <table className=\"withdrawal-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>User</th>\r\n              <th>Amount</th>\r\n              <th>Date</th>\r\n              <th>Status</th>\r\n              <th>Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {withdrawals.map((w, index) => {\r\n              const isUpdating = updatingId === w.id;\r\n              \r\n              let userData = null;\r\n              if (w.User) {\r\n                userData = w.User.dataValues || w.User;\r\n              } else if (w.user) {\r\n                userData = w.user.dataValues || w.user;\r\n              } else {\r\n                const possibleUserKey = Object.keys(w).find(key => key.toLowerCase().includes('user'));\r\n                if (possibleUserKey) userData = w[possibleUserKey];\r\n              }\r\n\r\n              return (\r\n                <tr key={w.id || `withdrawal-${index}`}>\r\n                  <td data-label=\"User\">\r\n                    {renderUserInfo(userData, w.id)}\r\n                  </td>\r\n                  <td data-label=\"Amount\" className=\"amount-cell\">\r\n                    {formatCurrency(w.amount)}\r\n                  </td>\r\n                  <td data-label=\"Date\">\r\n                    {w.createdAt ? formatDate(w.createdAt) : 'No date'}\r\n                  </td>\r\n                  <td data-label=\"Status\">\r\n                    <span className={`status-badge status-${(w.status || 'unknown').toLowerCase()}`}>\r\n                      {w.status || 'Unknown'}\r\n                    </span>\r\n                  </td>\r\n                  <td data-label=\"Actions\">\r\n                    <div className=\"action-buttons\">\r\n                      {(w.status === 'Pending' || w.status === 'pending') && (\r\n                        <>\r\n                          <button \r\n                            onClick={() => handleAction(w.id, 'approve')} \r\n                            className=\"btn btn-approve\"\r\n                            disabled={isUpdating}\r\n                            title={`Approve withdrawal request #${w.id}`}\r\n                          >\r\n                            {isUpdating ? '‚è≥ Processing...' : '‚úÖ Approve'}\r\n                          </button>\r\n                          <button \r\n                            onClick={() => handleAction(w.id, 'reject')} \r\n                            className=\"btn btn-reject\"\r\n                            disabled={isUpdating}\r\n                            title={`Reject withdrawal request #${w.id}`}\r\n                          >\r\n                            {isUpdating ? '‚è≥ Processing...' : '‚ùå Reject'}\r\n                          </button>\r\n                        </>\r\n                      )}\r\n                      {(w.status === 'approved' || w.status === 'Approved') && (\r\n                        <span className=\"status-text approved-text\">‚úÖ Approved</span>\r\n                      )}\r\n                      {(w.status === 'rejected' || w.status === 'Rejected') && (\r\n                        <span className=\"status-text rejected-text\">‚ùå Rejected</span>\r\n                      )}\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"withdrawal-page\">\r\n      <ToastContainer\r\n        position=\"top-right\"\r\n        autoClose={5000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n        theme=\"colored\"\r\n      />\r\n      <header className=\"page-header\">\r\n        <h2>Manage Withdrawals</h2>\r\n        <p>Review and process pending withdrawal requests.</p>\r\n      </header>\r\n      {renderContent()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Withdrawal;"],"names":["API_CONFIG","process","GET_ALL","APPROVE","id","REJECT","apiClient","axios","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject","formatCurrency","value","currency","arguments","length","undefined","toLocaleString","style","renderUserInfo","user","withdrawalId","console","log","warn","_jsxs","className","children","_jsx","color","Object","keys","userKeys","forEach","key","userName","userEmail","name","trim","fullName","username","displayName","firstName","lastName","full_name","first_name","last_name","email","emailAddress","mail","email_address","Withdrawal","withdrawals","setWithdrawals","useState","isLoading","setIsLoading","setError","updatingId","setUpdatingId","useEffect","async","response","get","data","Array","isArray","Error","err","message","fetchWithdrawals","handleAction","actionType","confirmMessage","ConfirmationComponent","_ref","closeToast","margin","display","justifyContent","gap","onClick","originalWithdrawals","newStatus","prev","map","w","status","endpoint","toUpperCase","requestData","adminNote","charAt","slice","Date","post","withdrawal","toast","success","_err$response","_err$response$data","errorMessage","performAction","position","autoClose","closeOnClick","draggable","toastId","ToastContainer","hideProgressBar","newestOnTop","rtl","pauseOnFocusLoss","pauseOnHover","theme","window","location","reload","index","isUpdating","userData","User","dataValues","possibleUserKey","find","toLowerCase","includes","amount","createdAt","dateString","toLocaleDateString","year","month","day","_Fragment","disabled","title"],"sourceRoot":""}