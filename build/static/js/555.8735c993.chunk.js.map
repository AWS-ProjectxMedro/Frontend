{"version":3,"file":"static/js/555.8735c993.chunk.js","mappings":"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","sources":["Component/AdminDashboard/userManagement.jsx"],"sourcesContent":["// UserManagement.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate, useOutletContext } from 'react-router-dom'; // Import useOutletContext\r\nimport './Style/UserManagement.scss';         // Ensure this path is correct\r\n\r\nconst UserManagement = () => {\r\n  const [users, setUsers] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const navigate = useNavigate();\r\n  const { onLogout } = useOutletContext() || {}; // Get onLogout from AdminDashboard context\r\n\r\n  const baseUrl = process.env.REACT_APP_API_BASE_URL;\r\n\r\n  const formatDate = (dateString) => {\r\n    if (!dateString) return 'N/A';\r\n    const date = new Date(dateString);\r\n    if (isNaN(date.getTime())) {\r\n      // console.warn('Invalid date string received for formatting:', dateString);\r\n      return 'Invalid Date';\r\n    }\r\n    return date.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!baseUrl) {\r\n      setError(\"API base URL is not configured. Please set REACT_APP_API_BASE_URL in your .env file.\");\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    const token = localStorage.getItem(\"authToken\");\r\n    const userRole = localStorage.getItem(\"userRole\"); // Good practice to check role again\r\n\r\n    if (!token || userRole !== \"admin\") { // Ensure only admin can access\r\n      setError(\"Unauthorized: No valid admin token or role. Please log in.\");\r\n      setLoading(false);\r\n      if (onLogout) onLogout(); // Use the central logout function\r\n      else navigate('/login'); // Fallback\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    axios.get(`${baseUrl}/api/users`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`\r\n      }\r\n    })\r\n      .then(response => {\r\n        let usersData = [];\r\n        if (Array.isArray(response.data)) {\r\n          usersData = response.data;\r\n        } else if (response.data && typeof response.data === 'object') {\r\n          usersData = response.data.users || response.data.data || [];\r\n          if (!Array.isArray(usersData)) {\r\n            console.error('Expected users array, but got:', usersData);\r\n            usersData = []; // Default to empty array on unexpected structure\r\n            throw new Error('Invalid data format for users list');\r\n          }\r\n        } else {\r\n          console.error('Invalid data format received for users:', response.data);\r\n          throw new Error('Invalid data format received from API');\r\n        }\r\n        setUsers(usersData);\r\n        setLoading(false);\r\n      })\r\n      .catch(err => {\r\n        console.error('Error fetching users:', err);\r\n        let errorMessage = 'Failed to fetch users.';\r\n        if (err.response) {\r\n          errorMessage += ` Server responded with status ${err.response.status}.`;\r\n          if (err.response.data && err.response.data.message) {\r\n            errorMessage += ` Message: ${err.response.data.message}`;\r\n          }\r\n          if (err.response.status === 401 || err.response.status === 403) {\r\n            errorMessage += \" Your session may have expired or you lack permission. Please log in again.\";\r\n            if (onLogout) onLogout();\r\n            else { // Fallback if onLogout is not available\r\n                localStorage.removeItem(\"authToken\");\r\n                localStorage.removeItem(\"userRole\");\r\n                localStorage.removeItem(\"userData\");\r\n                navigate('/login');\r\n            }\r\n          }\r\n        } else if (err.request) {\r\n          errorMessage += ' No response received from server. Check API server and network.';\r\n        } else {\r\n          errorMessage += ` Error: ${err.message}`;\r\n        }\r\n        setError(errorMessage);\r\n        setLoading(false);\r\n      });\r\n  }, [baseUrl, navigate, onLogout]); // Added onLogout to dependency array\r\n\r\n  if (loading && !users.length && !error) {\r\n    return <div className=\"user-management-page\"><p>Loading users...</p></div>;\r\n  }\r\n\r\n  return (\r\n    // This div is now a child of \"main-content-Admin\" from AdminDashboard.jsx\r\n    // REMOVED <SidebarAdmin />\r\n    <div className=\"user-management-page\"> {/* Or use \"user-management-content\" if that's more semantic for your CSS */}\r\n      <h2>User Management</h2>\r\n\r\n      {loading && users.length > 0 && <p>Updating user list...</p>} {/* More subtle loading for updates */}\r\n      {error && <p className=\"error-message\" style={{color: 'red', border: '1px solid red', padding: '10px'}}>{error}</p>}\r\n      \r\n      {!loading && !error && users.length === 0 && (\r\n        <p>No users found.</p>\r\n      )}\r\n\r\n      {!error && users.length > 0 && (\r\n        <>\r\n          <div className=\"table-responsive\">\r\n            <table className=\"user-table\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Name</th>\r\n                  <th>Email</th>\r\n                  <th>Phone</th>\r\n                  <th>Role</th>\r\n                  <th>Verified</th>\r\n                  <th>Joined</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {users.map(user => (\r\n                  <tr key={user.id || user._id}> {/* Support for _id from MongoDB */}\r\n                    <td>{user.name || 'N/A'}</td>\r\n                    <td>{user.email || 'N/A'}</td>\r\n                    <td>{user.phone || 'N/A'}</td>\r\n                    <td>{user.role || 'N/A'}</td>\r\n                    <td>\r\n                      {user.isEmailVerified ? 'Email ✓' : 'Email ✗'}\r\n                      {' | '}\r\n                      {user.isPhoneVerified ? 'Phone ✓' : 'Phone ✗'}\r\n                    </td>\r\n                    <td>{formatDate(user.createdAt || user.registrationDate)}</td> {/* Adjust date field name if necessary */}\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <div className=\"pagination\">\r\n            <button disabled>❮</button>\r\n            <span>1</span>\r\n            {/* Add more pagination logic as needed */}\r\n            <button disabled>❯</button>\r\n          </div>\r\n        </>\r\n      )}\r\n      {/* REMOVED <Outlet /> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserManagement;"],"names":["UserManagement","users","setUsers","useState","loading","setLoading","error","setError","navigate","useNavigate","onLogout","useOutletContext","baseUrl","process","formatDate","dateString","date","Date","isNaN","getTime","toLocaleDateString","year","month","day","useEffect","token","localStorage","getItem","userRole","axios","get","headers","then","response","usersData","Array","isArray","data","console","Error","catch","err","errorMessage","status","message","removeItem","request","length","_jsxs","className","children","_jsx","style","color","border","padding","_Fragment","map","user","name","email","phone","role","isEmailVerified","isPhoneVerified","createdAt","registrationDate","id","_id","disabled"],"sourceRoot":""}